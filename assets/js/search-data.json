{
  
    
        "post0": {
            "title": "Eastern State Penitentiary Analysis",
            "content": "Name: Jack Witherspoon Class: Digital Humanities 140 Term: Winter 2022 Professor: Ben Winjum . Project Title: Eastern State Penitentiary Analysis . Introduction: . In this notebook I will look to explore the &quot;Prisoner records from the Eastern State Penitentiary&quot; data set. This data set records the admissions of prisoners number 20 through 1124, including name, crime, sentence, place of origin, race/ethnicity, time in and time out, and comments on moral and educational conditions. In particular I would like to focus on the relationships between a prisoner&#39;s ability to read and write and the characteristics of their imprisonment. Since this data set does not provide the education level of each prisoner I am using the prisoners ability to read and write as a proxy for at least some level of education. . Another thing to note is that these prisoner records looked to have been transferred from another format, so many of the data points are incomplete or hard to analyze. These include things like combined columns, improper formatting, and missing information. Specifically there was one column that combined ethnicity, religion and occupation. In addition to the column having multiple data points combined into one there was also a significant amount missing for the ethnicity portion and much of the data was inconsistently ordered within the column. . Background: . The Eastern State Penitentiary, also known as ESP, is a former American prison in Philadelphia, Pennsylvania. It is located at 2027 Fairmount Avenue between Corinthian Avenue and North 22nd Street in the Fairmount section of the city, and was operational from 1829 until 1971. The penitentiary refined the revolutionary system of separate incarceration first pioneered at the Walnut Street Jail which emphasized principles of reform rather than punishment. . Notorious criminals such as Al Capone and bank robber Willie Sutton were held inside its innovative wagon wheel design. James Bruno (Big Joe) and several male relatives were incarcerated here between 1936 and 1948 for the alleged murders in the Kelayres massacre of 1934, before they were paroled. At its completion, the building was the largest and most expensive public structure ever erected in the United States, and quickly became a model for more than 300 prisons worldwide. . Data Cleaning: . The data set I am working with for this project is &quot;Prisoner records from the Eastern State Penitentiary&quot;. Upon working with this data it became clear that this had been transferred over from another format to CSV as the data appeared very messy. For example there was a conjoined column of ethnicity, occupation and religion where much of the data in that column was out of order or missing. This was a similar case for the “Column Notes” where much of the data was conjoined together. To solve this problem prior to uploading the data to Jupyter Notebooks I delimited the respective columns in Excel and filtered for the blank values to fill them in with a “N/A” value. There was excess data in the “Column Notes” when I delimited the column that I did not have any use for so I removed that data from the file. In addition, there was also some misspelling in the “Offense” column that I corrected and to consolidate the different data types. Lastly, there were two other text heavy columns; “Notes” and “Discharge Notes” that I did not end up using in my analysis so did not delimit or clean in any way. Once the data cleaning was complete I converted the xlsx file to a csv file to upload to jupyter notebooks. . Questions: . What does the typical prisoner at Eastern State Penitentiary look like? . | What effect does education have on the length of a prisoner&#39;s sentence? . | What relationship does the number of convictions have on the prisoner&#39;s length of sentence? . | Summary Statistics and Exploratory Data Visualizations: . import pandas as pd import csv import matplotlib.pyplot as plt from scipy import stats import numpy as np from sklearn.preprocessing import scale import statsmodels.api as sm import statsmodels.formula.api as smf from statsmodels.formula.api import ols . rawdata = pd.read_csv(&#39;Eastern_State_Admission_Book_A.csv&#39;) rawdata.head() . FirstName LastName Age EthnicityReligionOccupation Birthplace PrisonerNumber AdmissionDate SentencingLocation Offense Sentencing NumberConvictions ColumnNote DischargeNote Description . 0 William | Clark | 28 | Bread baker | Scotland | 20 | 4/24/1830 | NaN | Murder | 12 yrs | NaN | Can read and write | Pardoned and discharged June 1840. Conduct uni... | Break Baker. Exceedingly rough and uncourteous... | . 1 Elijah | Collins | 24 | Black | NaN | 31 | 8/17/1830 | NaN | Burglary | 10 yrs | NaN | Reads and writes; sober; single | Discharged. Time out. Some hope | Cooks for the sick. Professes to be turned to ... | . 2 George | Wilson | 30 | NaN | NaN | 56 | 10/25 [No year] | NaN | Robbing U.S. Mail | NaN | 4 | Can read and write | Discharged by pardon January 13, 1841 | Seems perfectly satisfied that he has been a r... | . 3 Samiul | Dill | 37 | Black | Sussex Co. Delaware | 323 | 11/21/1834 | Montgomery Co. | Larceny &amp; Prison Breaking | 6 yrs | 1 | Can read and write | Died July 7th, 1839 Died suddenly and without ... | Thinks he knows something of religion. Very lo... | . 4 Edward H. | Boyd | 20 | NaN | Albany, New York | 376 | 4/8/1835 | Franklin Co. | Horse Stealing &amp; Forgery | 5 yrs | 1 | Reads and writes | Discharged Time out | Young man of tolerably good mind and informati... | . data = pd.read_csv(&#39;Eastern_State_Admissions_Book.csv&#39;) data.head() . FirstName LastName Age Occupation Ethnicity Birthplace PrisonerNumber AdmissionDate SentencingLocation MainOffense Sentencing NumberConvictions ReadWrite AlcoholStatus DischargeNote Description . 0 William | Clark | 28.0 | baker | NaN | Scotland | 20.00 | 4/24/1830 | NaN | Murder | 12.0 | NaN | Can Read or Write | NaN | Pardoned and discharged June 1840. Conduct uni... | Break Baker. Exceedingly rough and uncourteous... | . 1 Elijah | Collins | 24.0 | NaN | Black | NaN | 31.00 | 8/17/1830 | NaN | Burglary | 10.0 | NaN | Can Read or Write | sober | Discharged. Time out. Some hope | Cooks for the sick. Professes to be turned to ... | . 2 George | Wilson | 30.0 | NaN | NaN | NaN | 56.00 | 10/25/1830 | NaN | Robbery | NaN | 4.0 | Can Read or Write | NaN | Discharged by pardon January 13, 1841 | Seems perfectly satisfied that he has been a r... | . 3 Samiul | Dill | 37.0 | NaN | Black | Sussex Co. Delaware | 323.00 | 11/21/1834 | Montgomery Co. | Larceny | 6.0 | 1.0 | Can Read or Write | NaN | Died July 7th, 1839 Died suddenly and without ... | Thinks he knows something of religion. Very lo... | . 4 Edward H. | Boyd | 20.0 | NaN | NaN | Albany, New York | 376.00 | 4/8/1835 | Franklin Co. | Stealing | 5.0 | 1.0 | Can Read or Write | NaN | Discharged Time out | Young man of tolerably good mind and informati... | . Summary Statistics of the Three Numeric Variables in the data set: Age, Sentencing and Number of Convictions . data.describe() . Age Sentencing NumberConvictions . count 517.000000 | 517.000000 | 513.000000 | . mean 29.462282 | 4.386847 | 1.619883 | . std 9.458858 | 4.128421 | 0.967113 | . min 12.000000 | 1.000000 | 1.000000 | . 25% 23.000000 | 2.000000 | 1.000000 | . 50% 27.000000 | 3.000000 | 1.000000 | . 75% 35.000000 | 5.000000 | 2.000000 | . max 71.000000 | 18.000000 | 6.000000 | . Exploratory Data Visualization 1: . This data visulization looks to explore the age of admissions to the Eastern State Prison . data.groupby(&#39;Age&#39;).size().plot() plt.xlabel(&quot;Age&quot;) plt.ylabel(&quot;Frequency&quot;) . Text(0, 0.5, &#39;Frequency&#39;) . Exploratory Data Visualization 2: . This data visulization looks to explore the freuqency of convictions. . data.groupby(&#39;NumberConvictions&#39;).size().plot.bar() plt.xlabel(&quot;Number of Convictions&quot;) plt.ylabel(&quot;Frequency&quot;) . Text(0, 0.5, &#39;Frequency&#39;) . Exploratory Data Visualization 3: . This data visulization looks to explore the freuqency of sentence length. . data.groupby(&#39;Sentencing&#39;).size().plot() plt.xlabel(&quot;Length of Sentence (Years)&quot;) plt.ylabel(&quot;Frequency&quot;) . Text(0, 0.5, &#39;Frequency&#39;) . Exploratory Data Visualization 4: . This data visulization looks to explore the percentage of prisoners that could read or write . data[&#39;ReadWrite&#39;].value_counts().plot.pie( colors=[&quot;#228B22&quot;, &quot;#FFC125&quot;], autopct=&quot;%.2f&quot;, fontsize=20, figsize=(6, 6), ); plt.legend() . &lt;matplotlib.legend.Legend at 0x7f8674726d60&gt; . Exploratory Data Visualization 5: . This data visulization looks to explore the freuqency of offenses. . data[&#39;MainOffense&#39;].value_counts().plot.bar() . &lt;AxesSubplot:&gt; . Exploratory Data Visualization 6: . This data visulization looks to explore the freuqency of offenses. . data[&#39;AlcoholStatus&#39;].value_counts().plot.pie( colors=[&quot;#CD2626&quot;, &quot;#87CEFA&quot;], autopct=&quot;%.2f&quot;, fontsize=18, figsize=(6, 6), ); plt.legend() . &lt;matplotlib.legend.Legend at 0x7f867462aa00&gt; . Main Take Aways from Exploratory Data Visualizations: . After exploring the data through some initial visualizations a few key things appeared. The first is that this population is very young. The second is that most of the prisoners here are being sentenced for Larceny with falling frequency of other crimes such as burglary, forgery, stealing and assault. In addition, it also becomes very clear that many of the prisoners sentenced have very little education with almost half lacking the ability to read or write. Lastly, it is also interesting to note that more than 3/4ths of the prisoners here drink alcohol in some capacity. During my analysis I would like to dig deeper to get more accurate means of some of these variables, and analyze to see if there is any relationship between a prisoner&#39;s ability to read and write other variables recorded in the data. . Data Analysis: . Part 1: Comparing averages to get a better picture of what the average prisoner at Eastern State Penitentiary looks like . avg_sent = data.Sentencing.mean() print(avg_sent) . 4.386847195357833 . avg_conv = data.NumberConvictions.mean() print(avg_conv) . 1.6198830409356726 . avg_age = data.Age.mean() med_age = data.Age.median() print(avg_age) print(med_age) . 29.46228239845261 27.0 . data.groupby(&#39;ReadWrite&#39;)[&#39;Sentencing&#39;].mean() . ReadWrite Can Read or Write 4.023529 Cannot read or write 5.000000 Name: Sentencing, dtype: float64 . data.groupby(&#39;ReadWrite&#39;)[&#39;Sentencing&#39;].plot.hist() plt.xlabel(&quot;Length of Sentence (Years)&quot;) plt.ylabel(&quot;Frequency&quot;) plt.legend() . &lt;matplotlib.legend.Legend at 0x7f867468dd30&gt; . data.groupby(&#39;ReadWrite&#39;)[&#39;NumberConvictions&#39;].plot.hist() plt.xlabel(&quot;Number of Conviction&quot;) plt.ylabel(&quot;Frequency&quot;) plt.legend() . &lt;matplotlib.legend.Legend at 0x7f867471f790&gt; . Results Summary . Expanding on the exploratory data visualizations in the previous section I wanted to calculate the means of different characteristics to get a better picture of the average prisoner at Eastern State Penitentiary. Much of the result confirms suspicions I had from my initial parse through the data. With the average sentence length around 4.38 years, average number of convictions being around 1.6 and average age of a prisoner being around 29 years old. Interestingly the median age of prisoners was slightly lower at 27 years old. In addition, I also found that it seemed the longer prison sentences tended to be served by those who did not have the ability to read or write. In my proceeding analysis I would like to preform a statistical test to confirm these suspicions. . Part 2: Statistical Analysis Of a Prisoner&#39;s Ability to Read and Write Compared to Their Sentence Length . data.groupby(&#39;ReadWrite&#39;)[&#39;Sentencing&#39;].describe() . count mean std min 25% 50% 75% max . ReadWrite . Can Read or Write 340.0 | 4.023529 | 3.514744 | 1.0 | 2.0 | 3.0 | 4.0 | 18.0 | . Cannot read or write 170.0 | 5.000000 | 4.930283 | 1.0 | 2.0 | 3.0 | 5.0 | 18.0 | . data.boxplot(column=[&#39;Sentencing&#39;], by=&#39;ReadWrite&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Sentencing&#39;}, xlabel=&#39;ReadWrite&#39;&gt; . ##df = data[data[&#39;Sentencing&#39;].notna() df = data.dropna(subset = [&#39;Sentencing&#39;]) . sample_yes = df[(df[&#39;ReadWrite&#39;] == &#39;Can Read or Write&#39;)] sample_no = df[(df[&#39;ReadWrite&#39;] == &#39;Cannot read or write&#39;)] print(sample_yes.shape) print(sample_no.shape) . (340, 16) (170, 16) . Data count is not the same. To fix this I will trim the &#39;sample_no&#39; to match &#39;sample_yes&#39;. . sample_yes = sample_yes.sample(170) print(sample_yes.shape) print(sample_no.shape) . (170, 16) (170, 16) . diff_res_read_sent = scale(np.array(sample_yes[&#39;Sentencing&#39;]) - np.array(sample_no[&#39;Sentencing&#39;])) plt.hist(diff_res_read_sent) . (array([15., 3., 3., 12., 39., 79., 11., 4., 0., 4.]), array([-2.64674316, -2.09042135, -1.53409954, -0.97777773, -0.42145592, 0.13486589, 0.6911877 , 1.24750951, 1.80383132, 2.36015313, 2.91647494]), &lt;BarContainer object of 10 artists&gt;) . This data does not look to be normally distributed. Will make QQ plot to further verify that data is not normally disrtibuted. . stats.probplot(diff_res_read_sent, plot=plt, dist=&#39;norm&#39;); . Residuals look high. Most likely will not be statistically significant . stats.levene(sample_yes[&#39;Sentencing&#39;], sample_no[&#39;Sentencing&#39;]) . LeveneResult(statistic=10.080123304339523, pvalue=0.001636620528736681) . The p-value is low so we reject the null hypothsis. The means are statisically significant. . print(sample_yes.var()) print(sample_no.var()) . Age 75.188152 Sentencing 8.305917 NumberConvictions 1.080874 dtype: float64 Age 86.729360 Sentencing 24.307692 NumberConvictions 0.560299 dtype: float64 . /tmp/ipykernel_4441/2963497352.py:2: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with &#39;numeric_only=None&#39;) is deprecated; in a future version this will raise TypeError. Select only valid columns before calling the reduction. print(sample_yes.var()) /tmp/ipykernel_4441/2963497352.py:3: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with &#39;numeric_only=None&#39;) is deprecated; in a future version this will raise TypeError. Select only valid columns before calling the reduction. print(sample_no.var()) . We can also verify the variances are different . Results Summary . In this section of my analysis I looked to analyze the relationship between a person&#39;s ability to read and write and the length of their sentence. I first did some initial analysis looking at the distribution of residuals. I did this by creating a histogram and QQ plot. Both these results showed the data to be fairly normally distributed. One of the main reasons I believe this to be the case is that since a lot of the data was missing I had to filter it out in order to perform the t-test. I still proceeded to perform a t-test and got a result that was statistically signigcant. Showing that we can reject the null hypothesis that the ability to read and write does have an effect on the length of the prison sentence. . Part 3: Linear Regression . mod = smf.ols(formula=&#39;Sentencing ~ NumberConvictions&#39;, data=df) res = mod.fit() print(res.summary()) . OLS Regression Results ============================================================================== Dep. Variable: Sentencing R-squared: 0.011 Model: OLS Adj. R-squared: 0.009 Method: Least Squares F-statistic: 5.402 Date: Tue, 15 Mar 2022 Prob (F-statistic): 0.0205 Time: 04:21:08 Log-Likelihood: -1440.9 No. Observations: 511 AIC: 2886. Df Residuals: 509 BIC: 2894. Df Model: 1 Covariance Type: nonrobust ===================================================================================== coef std err t P&gt;|t| [0.025 0.975] - Intercept 5.0445 0.352 14.348 0.000 4.354 5.735 NumberConvictions -0.4354 0.187 -2.324 0.021 -0.803 -0.067 ============================================================================== Omnibus: 244.205 Durbin-Watson: 1.459 Prob(Omnibus): 0.000 Jarque-Bera (JB): 911.865 Skew: 2.292 Prob(JB): 9.80e-199 Kurtosis: 7.671 Cond. No. 4.49 ============================================================================== Notes: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. . diff_res_sent_con = scale(np.array(data[&#39;Sentencing&#39;]) - np.array(data[&#39;NumberConvictions&#39;])) plt.hist(diff_res_sent_con) . (array([ 12., 100., 255., 62., 26., 9., 7., 9., 1., 30.]), array([-1.33677143, -0.87017976, -0.40358809, 0.06300357, 0.52959524, 0.9961869 , 1.46277857, 1.92937023, 2.3959619 , 2.86255356, 3.32914523]), &lt;BarContainer object of 10 artists&gt;) . Results Summary: . For my last analysis I wanted to perform an OLS regression on the relationship between the number of convictions and the length of a prisoner&#39;s sentence. In addition I also wanted to plot the residuals to compare the OLS regression to the distribution of residuals. Upon preforming my analysis the OLS shows that there is a weak negative correlation between the number of convictions and the length of the sentence. This was a bit surprising as my initial thoughts that there was going to be a strong positive correlation between the two variables. One possible explanation for this is that the people who have been convicted of multiple offenses have been charged with less serious offenses like theft. As opposed to the people who have only been charged with one sentance where it could have been a more serious charge like murder. Even though the OLS gave a result that showed a negative correlation between number of convictions and sentence length the R squared value was very low. Indicating that the sentence length does not describe very much of the relationship. For future analysis I could perform OLS regression on the other variables within the data set to determine if there is a variable that creates a more meaningful relationship. . Final Thoughts: . My analysis of The Eastern State Penitentiary admissions book has been an interesting exploration into the world of criminal Justice. Crime data is becoming increasingly prevalent in today’s society, so it was interesting seeing some of the first forms of it in this data set. I found a lot of the variables they recorded of the prisoners to be interesting to analyze. However, there were a number of variables that were inconsistently recorded which made some types of analysis difficult to perform. Overall I feel I was able to answer the questions I initially set out to answer. For future improvements to this project I think it would be interesting to utilize more recent crime data to compare against the data of Eastern State Penitentiary. In addition, I feel I could have delimited some of the notes differently to potentially analyze different variables. An example of this would be utilizing the discharge data and comparing it to their original sentence to see what percentage of prisoners stayed there full sentence. I hope to continue to utilize my skills in both python and data analysis to continue to learn more about criminal justice. .",
            "url": "https://jackwitherspoon.github.io/DH140FinalProject_Reuploaded/fastpages/jupyter/2022/03/14/DH140Final.html",
            "relUrl": "/fastpages/jupyter/2022/03/14/DH140Final.html",
            "date": " • Mar 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jackwitherspoon.github.io/DH140FinalProject_Reuploaded/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jackwitherspoon.github.io/DH140FinalProject_Reuploaded/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jackwitherspoon.github.io/DH140FinalProject_Reuploaded/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jackwitherspoon.github.io/DH140FinalProject_Reuploaded/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}